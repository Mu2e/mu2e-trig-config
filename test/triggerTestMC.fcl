#------------------------------------------------------------------------------
# runs the trigger reco on digis and writes out digis + triger products including MC truth matching
#------------------------------------------------------------------------------
#  > mu2e --config mu2e_trig_config/test/triggerTestMC.fcl --source "your digis file" --TFile globalFilter.root --nevts=100

#include "Offline/CommonMC/fcl/prolog_trigger.fcl"
#include "Production/JobConfig/digitize/prolog.fcl"
#include "mu2e_trig_config/test/triggerTest.fcl"
#
#  Add MC truth matching for the highP_stopTarg triggers
#
physics.producers.SelectRecoMCcprDe : {
  @table::CommonMCTrigger.TTSelectRecoMC
  KalSeedCollections  : [ "TTCalSeedFitDe" ]
  HelixSeedCollections  : ["TTCalHelixMergerDe" ]
}

physics.producers.SelectRecoMCtprDe : {
  @table::CommonMCTrigger.TTSelectRecoMC
  KalSeedCollections  : [ "TTKSFDe" ]
  HelixSeedCollections  : ["TTHelixMergerDe" ]
}

physics.producers.SelectRecoMCapr : {
  @table::CommonMCTrigger.TTSelectRecoMC
  KalSeedCollections  : [ "TTAprKSF" ]
  HelixSeedCollections  : ["TTAprHelixMerger" ]
}

physics.producers.SelectRecoMCmprDe : {
  @table::CommonMCTrigger.TTSelectRecoMC
  KalSeedCollections  : [ "TTMprKSFDe" ]
  HelixSeedCollections  : ["TTMprHelixMergerDe" ]
}

#
#  Add these to the sequences
#
physics.tprDe_highP_stopTarg           : [ @sequence::physics.tprDe_highP_stopTarg, SelectRecoMCtprDe]
physics.cprDe_highP_stopTarg           : [ @sequence::physics.cprDe_highP_stopTarg, SelectRecoMCcprDe]
physics.mprDe_highP_stopTarg           : [ @sequence::physics.mprDe_highP_stopTarg, SelectRecoMCmprDe]
physics.apr_highP_stopTarg             : [ @sequence::physics.apr_highP_stopTarg, SelectRecoMCapr]
#
# this next produces additional hit-level payload to support MC truth matching.
# It produces functionally equivalent output as the standard module but is slower, so don't use this script for timing studies
#
physics.producers.TTmakeSH.FilterHits : false
physics.producers.TTmakePH.TestFlag : true
physics.producers.TTmakePH.StrawHitSelectionBits : ["EnergySelection","TimeSelection","RadiusSelection"]
physics.producers.TTmakePH.StrawHitMask          : ["Dead"]
#
#  Create an output stream
#
outputs : {
  TriggeredOutput : {
    module_type : RootOutput
    SelectEvents : @local::Digitize.SignalTriggers
    outputCommands : [ "drop *_*_*_*",
      @sequence::Digitize.GeneralProducts,
      @sequence::Digitize.DigiProducts,
      @sequence::Digitize.TriggerProducts,
      "keep *_SelectRecoMC*_*_*" ]
  fileName : "dig.owner.triggerTestMC.version.sequencer.art"
  }
}
# don't use database time offsets in digitization
services.ProditionsService.strawElectronics.overrideDbTimeOffsets : true
physics.EndPath : [ TriggeredOutput ]
physics.end_paths : [ EndPath ]
